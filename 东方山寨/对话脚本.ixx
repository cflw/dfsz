export module 东方山寨.对话脚本;
export import <map>;
export import "基础.h";
export import "基础_对象工厂.h";
export import "输入.h";
export import 东方山寨.对话基础;
export import 东方山寨.对话控制;
export import 东方山寨.图形.角色标题;
import "游戏.h";
import "图形工厂.h";
import "输入.h";
import 东方山寨.图形.对话立绘;
export namespace 东方山寨 {
class C关卡控制;
class C对话脚本_角色;
class C对话脚本 {
public:
	operator tp对话脚本() const;
	C对话脚本_角色 f创建角色(int 标识, E对话方向 = E对话方向::e从左向右);
public:
	std::shared_ptr<ta对话事件> ma对话事件 = std::make_shared<ta对话事件>();
};
//简化操作的类
inline const t向量2 c角色标题偏移 = t向量2(48, 8);	//左边角色的偏移
class C对话脚本_角色 {
public:
	C对话脚本_角色(C对话脚本 *, int, E对话方向);
	void f对话(const std::wstring &);
	void f显示立绘(std::shared_ptr<const I图形建造机>);	//手动显示立绘,之后还要手动调用消失
	void f显示标题(const S角色标题 &, const t向量2 &偏移 = c角色标题偏移);	//短暂地显示角色名称和称号,偏移坐标相对左边角色坐标
	void f立绘聚焦();
	void f立绘消失();
	void f立绘表情(E立绘表情);
public:
	C对话脚本 *m脚本 = nullptr;
	int m标识 = -1;	//区分不同人物
	E对话方向 m方向 = E对话方向::e从左向右;
};
//对话事件
namespace 对话事件 {
tf对话事件 F对话(S对话参数_对话);
tf对话事件 F显示立绘(S对话参数_显示立绘);
tf对话事件 F显示角色标题(const S角色标题 &, const t向量2 & = c角色标题偏移);
tf对话事件 F立绘状态(S对话参数_立绘状态);
tf对话事件 F立绘表情(S对话参数_立绘表情);
}	//namespace 对话事件
}	//namespace 东方山寨
module: private;
namespace 东方山寨 {
//==============================================================================
// 对话脚本
//==============================================================================
C对话脚本::operator tp对话脚本() const {
	return ma对话事件;
}
C对话脚本_角色 C对话脚本::f创建角色(int a标识, E对话方向 a方向) {
	return C对话脚本_角色(this, a标识, a方向);
}
//==============================================================================
// 对话脚本_人物
//==============================================================================
C对话脚本_角色::C对话脚本_角色(C对话脚本 *a脚本, int a标识, E对话方向 a方向):
	m脚本(a脚本), m标识(a标识), m方向(a方向) {
}
void C对话脚本_角色::f对话(const std::wstring &a文本) {
	m脚本->ma对话事件->push_back(对话事件::F对话(S对话参数_对话(a文本, m方向)));
}
void C对话脚本_角色::f显示立绘(std::shared_ptr<const I图形建造机> a立绘) {
	m脚本->ma对话事件->push_back(对话事件::F显示立绘(S对话参数_显示立绘(a立绘, m标识, m方向)));
}
void C对话脚本_角色::f显示标题(const S角色标题 &a标题, const t向量2 &a偏移) {
	const float v坐标x = (m方向 == E对话方向::e从右向左 ? 1 : -1) * (I对话立绘::c立绘位置x - a偏移.x);
	const float v坐标y = I对话立绘::c立绘位置y + a偏移.y;
	m脚本->ma对话事件->push_back(对话事件::F显示角色标题(a标题, {v坐标x, v坐标y}));
}
void C对话脚本_角色::f立绘聚焦() {
	m脚本->ma对话事件->push_back(对话事件::F立绘状态(S对话参数_立绘状态(m标识, E立绘状态::e聚焦)));
}
void C对话脚本_角色::f立绘消失() {
	m脚本->ma对话事件->push_back(对话事件::F立绘状态(S对话参数_立绘状态(m标识, E立绘状态::e消失)));
}
void C对话脚本_角色::f立绘表情(E立绘表情 a表情) {
	m脚本->ma对话事件->push_back(对话事件::F立绘表情(S对话参数_立绘表情(m标识, a表情)));
}
//==============================================================================
// 对话事件
//==============================================================================
namespace 对话事件 {
tf对话事件 F对话(S对话参数_对话 a参数) {
	return [=](C对话控制 &a对话) {
		a对话.f控制_新对话框(a参数);
		a对话.f控制_等待();
		};
}
tf对话事件 F显示立绘(S对话参数_显示立绘 a参数) {
	return [=](C对话控制 &a对话) {
		a对话.f控制_显示立绘(a参数);
		a对话.f控制_继续();
		};
}
tf对话事件 F显示角色标题(const S角色标题 &a标题, const t向量2 &a坐标) {
	return [=](C对话控制 &a对话) {
		a对话.f添加对话图形(图形模板::f角色标题(a坐标, a标题));
	};
}
tf对话事件 F立绘状态(S对话参数_立绘状态 a参数) {
	return [=](C对话控制 &a对话) {
		a对话.f控制_立绘状态(a参数);
		a对话.f控制_继续();
		};
}
tf对话事件 F立绘表情(S对话参数_立绘表情 a参数) {
	return [=](C对话控制 &a对话) {
		a对话.f控制_立绘表情(a参数);
		a对话.f控制_继续();
		};
}
}	//namespace 对话事件
}	//namespace 东方山寨