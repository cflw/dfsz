#include "图形工厂.h"
#include "游戏.h"
namespace 东方山寨 {
//==============================================================================
// 参数
//==============================================================================
//==============================================================================
// 实现
//==============================================================================
void C图形工厂::C实现::f初始化_环境(const C游戏速度 &a速度) {
	m游戏速度 = &a速度;
}
void C图形工厂::C实现::f初始化_数组(C对象数组<I图形> &aa图形对象, C缓冲数组<I图形缓冲> &aa图形缓冲) {
	ma图形 = &aa图形对象;
	ma图形缓冲 = &aa图形缓冲;
}
void C图形工厂::C实现::f产生图形(const std::shared_ptr<I图形> &a指针, S图形参数 &a参数, I图形缓冲 *a缓冲) {
	if constexpr (c调试) {	//调试期检查
		if (a参数.m图层 == 0) {
			throw std::runtime_error("未指定图层");
		}
		if (a缓冲 == nullptr) {
			throw std::runtime_error("没有图形缓冲");
		}
	}
	I图形 *const v图形 = a指针.get();
	//编译参数
	if (a参数.m纹理.fi需编译()) {
		auto &va纹理 = C游戏::fg图形().fg纹理();
		va纹理.f编译(a参数.m纹理);
	}
	if (a参数.m顶点.fi需编译()) {
		auto &va顶点 = C游戏::fg图形().fg顶点矩形();
		va顶点.f编译(a参数.m顶点);
	}
	//赋值
	if (a缓冲) {
		v图形->m图形缓冲 = a缓冲;
		a缓冲->m图层 = a参数.m图层;
	}
	v图形->m游戏速度 = m游戏速度;
	v图形->m计数指针 = &ma图形->m计数;
	v图形->f接口_初始化(a参数);
	//结束
	v图形->f对象_使用();
	ma图形->f添加(a指针);
}
bool C图形工厂::C实现::fi有空() const {
	return ma图形->fi有空();
}
//==============================================================================
// 图形工厂
//==============================================================================
C图形工厂::C图形工厂(C实现 &a实现):
	m实现{&a实现} {
}
void C图形工厂::f实现_产生图形(const std::shared_ptr<I图形> &a图形, I图形缓冲 *a缓冲) {
	m实现->f产生图形(a图形, m参数, a缓冲);
}
std::shared_ptr<I图形> C图形工厂::f产生图形(const I图形建造机 &a建造) {
	using t过程 = C图形建造过程;
	if (m实现->fi有空()) {
		t过程 v过程;
		a建造.f接口_建造图形(v过程);
		a建造.f接口_建造图形缓冲(v过程);
		m实现->f产生图形(v过程.m图形, m参数, v过程.m图形缓冲.get());
		m实现->ma图形缓冲->f添加(std::move(v过程.m图形缓冲));
		return v过程.m图形;
	}
	return nullptr;
}
//==============================================================================
}	//namespace 东方山寨