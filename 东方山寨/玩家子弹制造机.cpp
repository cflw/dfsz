#include "玩家子弹制造机.h"
#include "玩家子弹基础.h"
#include "玩家子弹发射基础.h"
#include "玩家炸弹基础.h"
import 东方山寨.计算;
namespace 东方山寨 {
//==============================================================================
// 参数
//==============================================================================
C玩家子弹循环 S玩家子弹参数::f循环(int a次数) {
	return C玩家子弹循环(*this, a次数);
}
//==============================================================================
// 循环
//==============================================================================
C玩家子弹循环::C玩家子弹循环(S玩家子弹参数 &a参数, int a次数):
	m计数(0), m总数(a次数), mp参数(&a参数), m参数备份(a参数) {
}
void C玩家子弹循环::f循环控制_自增() {
	++m计数;
	*mp参数 = m参数备份;
}
bool C玩家子弹循环::f循环控制_i继续() {
	return m计数 != m总数;
}
int C玩家子弹循环::fg计数() const {
	return m计数;
}
int C玩家子弹循环::fg总数() const {
	return m总数;
}
float C玩家子弹循环::fg百分比() const {
	return (float)(m计数) / (float)(m总数 - 1);
}
float C玩家子弹循环::f计算(t标志 a标志) const {
	return C循环计算::f计算(fg计数(), fg总数(), a标志);
}
t向量2 C玩家子弹循环::f计算_速度变换(float a大小, float a方向r, float a计算) const {
	const t向量2 &m速度 = mp参数->m速度;
	const float v大小 = m速度.fg大小() + a大小 * a计算;
	const float v方向 = m速度.fg方向r() + a方向r * a计算;
	return t向量2::fc方向r(v大小, v方向);
}
//变换
void C玩家子弹循环::f变换_速度(float a大小, float a方向r, float a计算) {
	mp参数->m速度 = f计算_速度变换(a大小, a方向r, a计算);
}
void C玩家子弹循环::f变换_坐标平移(const t向量2 &a移动, float a计算) {
	mp参数->m坐标 += a移动 * a计算;
}
void C玩家子弹循环::f变换模板_发散(std::shared_ptr<I玩家发射环境> a发射环境, const std::pair<float, float> &a角度间隔, const std::pair<float, float> &a坐标x间隔) {
	const float v计算 = f计算(C循环计算::c计数居中);
	const float v低速渐变 = a发射环境->fg低速渐变();
	if (const float v坐标x = 计算::f插值(a坐标x间隔, v低速渐变)) {
		f变换_坐标平移(t向量2(-v坐标x, 0), v计算);
	}
	if (const float v方向 = 计算::f插值(a角度间隔, v低速渐变)) {
		f变换_速度(0, v方向, v计算);
	}
}
//==============================================================================
// 工厂
//==============================================================================
void C玩家子弹制造机::f初始化_环境(const C游戏速度 &a游戏速度) {
	m游戏速度 = &a游戏速度;
}
void C玩家子弹制造机::f初始化_数组(C对象数组<C玩家子弹> &aa子弹, C缓冲数组<I图形缓冲> &aa图形缓冲) {
	ma子弹 = &aa子弹;
	ma图形缓冲 = &aa图形缓冲;
}
void C玩家子弹制造机::f产生子弹0(const std::shared_ptr<C玩家子弹> &a子弹, const S玩家子弹参数 &a参数) const {
	a子弹->m游戏速度 = m游戏速度;
	a子弹->m计数指针 = &ma子弹->m计数;
	if (a参数.m发射环境) {
		a子弹->m玩家 = &a参数.m发射环境->fg玩家();
	}
	a子弹->f接口_初始化(a参数);
	a子弹->f接口_初始化图形(*ma图形缓冲);
	a子弹->f对象_使用();
	ma子弹->f添加(a子弹);
}
void C玩家子弹制造机::f产生炸弹0(const std::shared_ptr<C玩家炸弹> &a炸弹, const S玩家子弹参数 &a参数) const {
	a炸弹->m游戏速度 = m游戏速度;
	a炸弹->m计数指针 = &ma子弹->m计数;
	if (a参数.m发射环境) {
		a炸弹->m玩家 = &a参数.m发射环境->fg玩家();
	}
	a炸弹->m标志[C玩家子弹::e炸弹] = true;
	a炸弹->m标志[C玩家子弹::e产生道具] = true;
	a炸弹->f接口_初始化(a参数);
	a炸弹->f接口_初始化图形(*ma图形缓冲);
	a炸弹->f对象_使用();
	ma子弹->f添加(a炸弹);
}
bool C玩家子弹制造机::fi有空() const {
	return ma子弹->fi有空();
}
}	//namespace 东方山寨