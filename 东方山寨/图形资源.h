#pragma once
#include "数学包含.h"
#include "图形包含.h"
namespace 东方山寨 {
//==============================================================================
// 二维纹理,包含完整信息
//==============================================================================
struct S纹理 {
	三维::tp纹理资源视图 m纹理;
	t向量2 m尺寸;
};
//==============================================================================
// 二维顶点,一个纹理的其中一个片段
//==============================================================================
struct S顶点矩形 {
	enum E方位 {
		e左, e上, e右, e下
	};
	float m坐标[4] = {0, 0, 0, 0}, m纹理[4] = {0, 0, 0, 0};	//左,上,右,下
	//构造
	static S顶点矩形 fc纹理切片(const t向量2 &纹理尺寸, float 左, float 上, float 右, float 下);	//使用窗口坐标系
	static S顶点矩形 fc填充背景(const t向量2 &屏幕尺寸, const t向量2 &纹理尺寸);	//等比例放大，背景比屏幕大
	static S顶点矩形 fc适应背景(const t向量2 &屏幕尺寸, const t向量2 &纹理尺寸);	//等比例放大，背景比屏幕小
	static S顶点矩形 fc拉伸背景(const t向量2 &屏幕尺寸, const t向量2 &纹理尺寸);	//放大，背景和屏幕一样大
	static S顶点矩形 fc平铺背景(const t向量2 &屏幕尺寸, const t向量2 &纹理尺寸, float 纹理缩放 = 1);	//
	static S顶点矩形 fc居中背景(const t向量2 &屏幕尺寸, const t向量2 &纹理尺寸, float 纹理缩放 = 1);	//
	//属性
	float fg坐标x(float 插值) const;
	float fg坐标y(float 插值) const;
	float fg纹理x(float 插值) const;
	float fg纹理y(float 插值) const;
	float fg宽() const;
	float fg高() const;
};
//==============================================================================
// 三维模型
//==============================================================================
struct S三维顶点 {
	t向量3 m坐标;
	t向量2 m纹理;
};
class C模型 {
public:
	C模型(const S三维顶点 *, size_t, const uint16_t *, size_t);
	C模型(const C模型 &) = delete;
	C模型(C模型 &&);
	C模型 &operator =(const C模型 &) = delete;
	C模型 &operator =(C模型 &&);
	~C模型();
public:	//成员变量在构造完成之后只读
	S三维顶点 *m顶点;
	uint16_t *m索引;
	size_t m顶点数, m索引数;
};
}	//namespace 东方山寨