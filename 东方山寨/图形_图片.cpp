#include "游戏.h"
#include "图形_图片.h"
#include "图形工厂.h"
#include "图形_画图片.h"
namespace 东方山寨 {
void C画图片动画::f显示图片(const t向量2 &a坐标, const tp纹理 &a纹理, const S顶点矩形 *a顶点, const I动画 &a动画) {
	f显示图片3(a纹理, a顶点[a动画.f接口_g顶点序号()], a坐标, a动画.f接口_g旋转(), a动画.f接口_g缩放(), a动画.f接口_g透明度());
}
void C画图片动画::f显示图片2(const tp纹理 &a纹理, const S顶点矩形 &a顶点, const t向量2 &a平移, float a旋转, const t向量2 &a缩放, float a透明) {
	auto &v画图片 = C游戏::fg图形().fg画图片();
	v画图片.fs纹理(a纹理);
	v画图片.fs坐标(a平移);
	v画图片.fs透明度(a透明);
	v画图片.f变换_重置();
	v画图片.f变换_旋转(a旋转);
	v画图片.f变换_缩放(a缩放.x, a缩放.y);
	v画图片.f画图片(a顶点);
}
void C画图片动画::f显示图片3(const tp纹理 &a纹理, const S顶点矩形 &a顶点, const t向量2 &a平移, const t向量3 &a旋转, const t向量3 &a缩放, float a透明) {
	auto &v画图片 = C游戏::fg图形().fg画图片();
	v画图片.fs纹理(a纹理);
	v画图片.fs坐标(a平移);
	v画图片.fs透明度(a透明);
	v画图片.f变换_重置();
	v画图片.f变换_旋转(a旋转);
	v画图片.f变换_缩放(a缩放.x, a缩放.y);
	v画图片.f画图片(a顶点);
}
//==============================================================================
// 顶点动画
//==============================================================================
bool C内置图片动画::fi纹理() const {
	const S图片动画属性 &v属性 = fg图片动画属性();
	return v属性.m纹理.m指针 != nullptr;
}
const S顶点矩形 &C内置图片动画::fg顶点矩形() const {
	const S图片动画属性 &v属性 = fg图片动画属性();
	return v属性.m顶点[m动画->f接口_g顶点序号()];
}
void C内置图片动画::f显示() const {
	if (fi纹理()) {
		f显示图片();
	}
}
void C内置图片动画::f显示图片() const {
	const S图片动画属性 &v属性 = fg图片动画属性();
	C画图片动画::f显示图片(fg坐标(), *v属性.m纹理, v属性.m顶点.m指针, *m动画);
}
//==============================================================================
// 顶点动画属性
//==============================================================================
std::unique_ptr<I动画> S图片动画属性::fc动画(void *a父) const {
	std::unique_ptr<I动画> v = m动画->f新建u();
	if (a父) {
		v->f接口_s父对象(a父);
	}
	return v;
}
//==============================================================================
// 快速图片动画
//==============================================================================
void C二维图片图形::f接口_计算() {
	this->f事件_执行();
	f计算_运动();
	f计算_生命();
}
void C二维图片图形::f兼容显示() const {
	f显示图片();
}
void C二维图片图形::f接口_初始化(const S图形参数 &a参数) {
	I粒子::f接口_初始化(a参数);
	m纹理 = a参数.m纹理.m指针;
	assert(m纹理);
	m顶点 = a参数.m顶点.m指针;
}
t向量3 C二维图片图形::f接口_g旋转() const {
	return {0, 0, m旋转};
}
t向量3 C二维图片图形::f接口_g缩放() const {
	return {m缩放.x, m缩放.y, 1};
}
float C二维图片图形::f接口_g透明度() const {
	return fg反生命百分比();
}
bool C二维图片图形::fi纹理() const {
	return m纹理 != nullptr;
}
const S顶点矩形 &C二维图片图形::fg顶点矩形() const {
	return m顶点[0];
}
void C二维图片图形::f显示图片() const {
	C画图片动画::f显示图片(m坐标, *m纹理, m顶点, *this);
}
//==============================================================================
// 快速图片动画
//==============================================================================
void C三维图片图形::f接口_计算() {
	this->f事件_执行();
	f计算_运动();
	f计算_生命();
}
void C三维图片图形::f兼容显示() const {
	f显示图片();
}
void C三维图片图形::f接口_初始化(const S图形参数 &a参数) {
	I粒子::f接口_初始化(a参数);
	m纹理 = a参数.m纹理.m指针;
	assert(m纹理);
	m顶点 = a参数.m顶点.m指针;
}
t向量3 C三维图片图形::f接口_g旋转() const {
	return m旋转;
}
t向量3 C三维图片图形::f接口_g缩放() const {
	return m缩放;
}
float C三维图片图形::f接口_g透明度() const {
	return fg反生命百分比();
}
bool C三维图片图形::fi纹理() const {
	return m纹理 != nullptr;
}
const S顶点矩形 &C三维图片图形::fg顶点矩形() const {
	return m顶点[0];
}
void C三维图片图形::f显示图片() const {
	C画图片动画::f显示图片(m坐标, *m纹理, m顶点, *this);
}
}