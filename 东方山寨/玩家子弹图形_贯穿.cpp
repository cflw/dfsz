#include "玩家子弹图形_贯穿.h"
#include "图层.h"
#include "玩家子弹基础.h"
#include "游戏.h"
#include "图形_画图片.h"
#include "玩家子弹扩展_贯穿.h"
namespace 东方山寨::玩家子弹 {
//==============================================================================
// 贯穿激光图片
//==============================================================================
C贯穿激光图形_图片::C贯穿激光图形_图片(const C玩家子弹 &a对象, C缓冲数组<I图形缓冲> &aa图形缓冲):
	I对象图形<C玩家子弹>(a对象) {
	m图形缓冲 = aa图形缓冲.f新建<C图形缓冲>();
	m图形缓冲->f初始化_图层((int)E图层::e玩家子弹);
	m图形缓冲->m属性 = a对象.m子弹属性;
	m图形缓冲->m矩形 = *a对象.m子弹属性->m顶点;
}
void C贯穿激光图形_图片::f计算() {

}
void C贯穿激光图形_图片::f更新() {
	C贯穿 *v对象 = (C贯穿 *)m对象;
	m图形缓冲->m坐标 = v对象->m坐标;
	m图形缓冲->m方向 = v对象->m方向;
	m图形缓冲->m透明度 = v对象->fg透明度();
	//准备顶点矩形
	const S顶点矩形 &v属性矩形 = *v对象->m子弹属性->m顶点;
	S顶点矩形 &v矩形 = m图形缓冲->m矩形;
	v矩形.m坐标[0] = 0;
	v矩形.m坐标[2] = v对象->m长度;
	v矩形.m纹理[0] = 0;
	v矩形.m纹理[2] = v属性矩形.m纹理[2] / v属性矩形.fg宽() * v对象->m长度;
	v矩形.m纹理[0] -= v对象->m出现;
	v矩形.m纹理[2] -= v对象->m出现;
}
I图形缓冲 &C贯穿激光图形_图片::fg图形缓冲() const {
	return *m图形缓冲;
}
void C贯穿激光图形_图片::C图形缓冲::f显示() const {
	auto &v画图片 = C游戏::fg图形().fg画图片();
	v画图片.fs纹理(*m属性->m纹理);
	v画图片.fs坐标(m坐标);
	v画图片.fs透明度(m透明度);
	v画图片.f变换_重置();
	v画图片.f变换_旋转(m方向);
	v画图片.f画图片(m矩形);
}
//==============================================================================
// 贯穿激光线条
//==============================================================================
C贯穿激光图形_线条::C贯穿激光图形_线条(const C玩家子弹 &a对象, C缓冲数组<I图形缓冲> &aa图形缓冲):
	I对象图形<C玩家子弹>(a对象) {
	m图形缓冲 = aa图形缓冲.f新建<C图形缓冲>();
	m图形缓冲->f初始化_图层((int)E图层::e玩家子弹);
}
void C贯穿激光图形_线条::f计算() {

}
void C贯穿激光图形_线条::f更新() {
	C贯穿 *v对象 = (C贯穿 *)m对象;
	m图形缓冲->m坐标 = v对象->m坐标;
	m图形缓冲->m末端 = v对象->fg末端();
	m图形缓冲->m透明度 = v对象->fg透明度();
}
I图形缓冲 &C贯穿激光图形_线条::fg图形缓冲() const {
	return *m图形缓冲;
}
void C贯穿激光图形_线条::C图形缓冲::f显示() const {
	auto &v画图形 = C游戏::fg图形().fg画图形();
	v画图形.fs线条宽度(4);
	v画图形.fs颜色({0, 0, 1, m透明度});
	v画图形.f绘制线条(t线段(m坐标, m末端));
}
}	//namespace 东方山寨::玩家子弹