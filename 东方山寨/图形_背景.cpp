#include "游戏常量.h"
#include "图形_背景.h"
#include "图形_画图片.h"
#include "图形工厂.h"
#include "游戏.h"
namespace 东方山寨 {
//==============================================================================
// 普通背景
//==============================================================================
C背景::C背景(const C背景管理 &a背景管理):
	m背景管理(&a背景管理) {
}
void C背景::f接口_初始化(const S图形参数 &a参数) {
	m最大透明度 = a参数.m透明度;
	C图形缓冲 *const v缓冲 = static_cast<C图形缓冲 *>(m图形缓冲);
	v缓冲->m纹理 = a参数.m纹理.m指针;
	v缓冲->m顶点矩形 = &m背景管理->m顶点矩形;
}
void C背景::f接口_更新() {
	C图形缓冲 *const v缓冲 = static_cast<C图形缓冲 *>(m图形缓冲);
	const float v渲染秒 = C游戏::fg图形().fg渲染秒();
	m出现 += v渲染秒;
	if (m标志[e消失]) {
		m消失 += v渲染秒;
	}
	const float v出现透明度 = std::min<float>(m出现, 1);
	const float v消失透明度 = std::min<float>(1 - m消失, 1);
	v缓冲->m透明度 = std::max<float>(v出现透明度, v消失透明度) * m最大透明度;
}
bool C背景::f接口_i可销毁() const {
	return m消失 >= 1;
}
void C背景::f动作_结束() {
	m标志[e消失] = true;
}
void C背景::C图形缓冲::f显示() const {
	auto &v画图片 = C游戏::fg图形().fg画图片();
	v画图片.fs坐标(t向量2::c零);
	v画图片.fs纹理(*m纹理);
	v画图片.fs透明度(m透明度);
	v画图片.f变换_重置();
	v画图片.f画图片(*m顶点矩形);
}
//==============================================================================
// 背景管理
//==============================================================================
void C背景管理::fs屏幕尺寸(float x, float y) {
	m屏幕尺寸.x = x;
	m屏幕尺寸.y = y;
	m顶点矩形 = S顶点矩形::fc填充背景(m屏幕尺寸, t向量2::c一);
}
}	//namespace 东方山寨