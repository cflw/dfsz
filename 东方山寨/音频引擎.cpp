#include "音频引擎.h"
namespace 东方山寨 {
//==============================================================================
// 音频引擎
//==============================================================================
void C音频引擎::f初始化() {
	m音频 = std::make_unique<音频::C音频>();
	m音频->f初始化();
	m播放控制 = std::make_unique<C播放控制>();
	m播放控制->f初始化_接口(*m音频);
}
void C音频引擎::f计算() {
	m播放控制->f计算();
}
void C音频引擎::f销毁() {
	m播放控制->f销毁();
	m音频->f销毁();
	m音频.reset();
}
C属性数组<tp声音> &C音频引擎::fg声音() {
	return ma声音;
}
C声音工厂 &C音频引擎::fg声音工厂() {
	if (m声音工厂 == nullptr) {
		m声音工厂 = std::make_unique<C声音工厂>();
		m声音工厂->f初始化_接口(*m音频);
		m声音工厂->f初始化_数组(ma声音);
	}
	return *m声音工厂;
}

C播放控制 &C音频引擎::fg播放控制() {
	return *m播放控制;
}
//==============================================================================
// 播放控制
//==============================================================================
void C播放控制::f初始化_接口(音频::C音频 &a音频) {
	m播放.f初始化(a音频);
	m播放.fs重复播放间隔(c播放间隔);
	for (auto &v混合 : ma混合) {
		a音频.f创建混合(v混合);
	}
}
void C播放控制::f计算() {
	m播放.f刷新();
}
void C播放控制::f销毁() {
	m播放.f停止全部();
	for (auto &v混合 : ma混合) {
		v混合->f销毁();
	}
}
void C播放控制::f播放音效s(const 音频::C声音 &a声音) {
	m播放.f播放(a声音, *ma混合[e音效s]);
}
void C播放控制::f播放音效m(const 音频::C声音 &a声音) {
	m播放.f播放(a声音, *ma混合[e音效m]);
}
void C播放控制::f播放音效l(const 音频::C声音 &a声音) {
	m播放.f播放(a声音, *ma混合[e音效l]);
}
void C播放控制::f播放音乐(const 音频::C声音 &a声音) {
	if (m音乐) {
		m播放.f停止(m音乐);
	}
	m音乐 = m播放.f播放(a声音, *ma混合[e音乐]);
}
void C播放控制::fs音效音量(float a) {
	ma混合[e音效s]->fs音量(a * c音效s);
	ma混合[e音效m]->fs音量(a * c音效m);
	ma混合[e音效l]->fs音量(a * c音效l);
}
void C播放控制::fs音乐音量(float a) {
	ma混合[e音乐]->fs音量(a);
}
float C播放控制::fg音效音量() const {
	return ma混合[e音效l]->fg音量();
}
float C播放控制::fg音乐音量() const {
	return ma混合[e音乐]->fg音量();
}
//==============================================================================
// 声音工厂
//==============================================================================
void C声音工厂::f初始化_接口(音频::C音频 &a) {
	m音频 = &a;
}
void C声音工厂::f初始化_数组(C属性数组<tp声音> &a) {
	ma声音 = &a;
}
tp声音 C声音工厂::f创建声音(int a标识, const std::wstring &a文件名) {
	if (ma声音->fi不存在(a标识)) {
		tp声音 v声音;
		HRESULT hr = m音频->f创建声音(v声音, a文件名.c_str());
		if (FAILED(hr)) {
			return nullptr;
		}
		ma声音->f添加(a标识, v声音);
		return v声音;
	} else {
		return ma声音->fg数据(a标识);
	}
}
}