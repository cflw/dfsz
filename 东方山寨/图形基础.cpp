#include "图形基础.h"
#include "图形引擎.h"
#include "游戏.h"
#include "图形工厂.h"
namespace 东方山寨 {
//=============================================================================
// I图形
//=============================================================================
void I图形::f接口_计算() {
}
void I图形::f接口_更新() {
}
void I图形::f接口_初始化(const S图形参数 &p参数) {
}
bool I图形::f接口_i可销毁() const {
	return m标志[e结束];
}
void I图形::f对象_使用() {
	m标志[e使用] = true;
	m计数指针->f加计数();
}
void I图形::f对象_销毁() {
	m标志.reset();
	m计数指针->f减计数();
}
bool I图形::f对象_i使用() {
	return m标志[e使用];
}
void I图形::f动作_结束() {
	m标志[e结束] = true;
}
//=============================================================================
// 粒子
//=============================================================================
void I粒子::f接口_初始化(const S图形参数 &p参数) {
	I图形::f接口_初始化(p参数);
	m坐标 = p参数.m坐标;
	m速度 = p参数.m速度;
	m寿命 = p参数.m寿命;
}
bool I粒子::f接口_i可销毁() const {
	return fi死亡();
}
void I粒子::f计算_运动() {
	m坐标 += m速度 * m游戏速度->fg秒();
}
void I粒子::f计算_生命() {
	m生命 += m游戏速度->fg秒();
}
float I粒子::fg生命百分比() const {
	return m生命 / m寿命;
}
float I粒子::fg反生命百分比() const {
	return 1 - fg生命百分比();
}
bool I粒子::fi死亡() const {
	return m生命 >= m寿命;
}
namespace 图形 {
//=============================================================================
// 圆形
//=============================================================================
C圆形::C圆形(float p开始, float p结束):
	m开始半径{p开始}, m结束半径{p结束} {
}
void C圆形::f接口_计算() {
	f计算_生命();
}
void C圆形::f接口_显示() const {
	auto &v画图形 = C游戏::fg图形().fg画图形();
	v画图形.fs颜色(t颜色{1, 1, 1, fg反生命百分比()});
	v画图形.f绘制圆形(t圆形(m坐标, fg当前半径()));
}
float C圆形::fg当前半径() const {
	return 数学::f插值<float>(m开始半径, m结束半径, fg生命百分比());
}
}	//namespace 图形
}	//namespace 东方山寨